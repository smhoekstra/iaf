/*
 * $Log: XslErrorMessageFormatter.java,v $
 * Revision 1.6  2006-12-13 16:24:55  europe\L190409
 * updated javadoc
 *
 * Revision 1.5  2004/03/31 12:04:19  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * fixed javadoc
 *
 * Revision 1.4  2004/03/30 07:30:00  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * updated javadoc
 *
 */
package nl.nn.adapterframework.errormessageformatters;


import nl.nn.adapterframework.core.INamedObject;
import nl.nn.adapterframework.util.ClassUtils;
import nl.nn.adapterframework.util.XmlUtils;

import javax.xml.transform.Transformer;
import java.io.IOException;

/**
 * Applies a XSLT-stylesheet to the standard error generated by
 * {@link ErrorMessageFormatter}.
 * <p>If the transformation does not succeed, this standard error message
 * is returned and an exception is logged.
 * <p><b>Configuration:</b>
 * <table border="1">
 * <tr><th>attributes</th><th>description</th><th>default</th></tr>
 * <tr><td>className</td><td>nl.nn.adapterframework.errormessageformatters.XslErrorMessageFormatter</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setStyleSheet(String) styleSheet}</td><td>stylesheet to use for transformation</td><td>&nbsp;</td></tr>
 * </table>
* 
 * @version Id
 * @author Johan Verrips IOS
 */
public class XslErrorMessageFormatter extends ErrorMessageFormatter {
	public static final String version = "$RCSfile: XslErrorMessageFormatter.java,v $ $Revision: 1.6 $ $Date: 2006-12-13 16:24:55 $";

    private String styleSheet;
    
	public String format(
	    String message,
	    Throwable t,
	    INamedObject location,
	    String originalMessage,
	    String messageId,
	    long receivedTime) {
	
		String result = super.format(message, t, location, originalMessage, messageId, receivedTime);
	
	    if (styleSheet != null) {
	
	        try {
	            Transformer errorTransformer =
	                XmlUtils.createTransformer(
	                    ClassUtils.getResourceURL(this, styleSheet));
	            result = XmlUtils.transformXml(errorTransformer, result);
	        } catch (IOException e) {
	            log.error(" cannot retrieve [" + styleSheet + "]", e);
	        } catch (javax.xml.transform.TransformerConfigurationException te) {
	            log.error("got error creating transformer from file [" + styleSheet + "]", te);
	        } catch (Exception tfe) {
	            log.error(
	                "could not transform [" + result + "] using stylesheet [" + styleSheet + "]",
	                tfe);
	        }
	    } else
	        log.warn("no stylesheet defined for XslErrorMessageFormatter");
	    return result;
		    
	}
	
	/**
	 * URL to the stylesheet used to transform the output of the standard {@link ErrorMessageFormatter} 
	 */
	public String getStyleSheet() {
		return styleSheet;
	}
	public void setStyleSheet(String newStyleSheet) {
		styleSheet = newStyleSheet;
	}
}
