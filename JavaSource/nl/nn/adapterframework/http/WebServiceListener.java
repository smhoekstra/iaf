/*
 * $Log: WebServiceListener.java,v $
 * Revision 1.12  2011-05-19 15:11:03  L190409
 * now extends PushingListenerAdapter
 *
 * Revision 1.11  2011/02/21 18:07:10  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * implemented HasPhysicalDestinationName
 *
 * Revision 1.10  2007/10/17 09:07:24  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * removed unused imports
 *
 * Revision 1.9  2007/10/08 12:18:20  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * changed HashMap to Map where possible
 *
 * Revision 1.8  2007/10/03 08:39:05  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * changed HashMap to Map
 *
 * Revision 1.7  2007/02/12 13:55:57  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * Logger from LogUtil
 *
 * Revision 1.6  2006/01/05 14:18:57  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * updated javadoc
 *
 * Revision 1.5  2005/07/19 14:49:54  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * implementing serviceClient2
 * added attribute applicationFaultsAsSoapFaults
 *
 * Revision 1.4  2005/04/26 09:26:52  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * added serviceNamespaceURI attribute
 *
 * Revision 1.3  2004/09/09 14:49:19  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * removed unused variable declarations
 *
 * Revision 1.2  2004/08/23 13:08:14  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * updated JavaDoc
 *
 * Revision 1.1  2004/08/23 07:13:40  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * renamed WebServiceMessagePusher to WebServiceListener
 *
 * Revision 1.2  2004/08/09 13:54:13  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * changed ServiceClient to MessageHandler
 *
 * Revision 1.1  2004/07/15 07:40:43  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * introduction of http package
 *
 * Revision 1.2  2004/06/30 12:34:13  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * added (dummy) setter for exceptionlistener
 *
 * Revision 1.1  2004/06/22 12:12:52  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * introduction of MessagePushers and PushingReceivers
 *
 */
package nl.nn.adapterframework.http;

import java.io.Serializable;

import nl.nn.adapterframework.configuration.ConfigurationException;
import nl.nn.adapterframework.core.HasPhysicalDestination;
import nl.nn.adapterframework.core.IPushingListener;
import nl.nn.adapterframework.receivers.ServiceDispatcher;

import org.apache.commons.lang.StringUtils;

/**
 * Implementation of a {@link IPushingListener} that enables a {@link nl.nn.adapterframework.receivers.GenericReceiver}
 * to receive messages as a web-service.
 * <p><b>Configuration:</b>
 * <table border="1">
 * <tr><th>attributes</th><th>description</th><th>default</th></tr>
 * <tr><td>className</td><td>nl.nn.adapterframework.http.WebServiceListener</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setName(String) name}</td><td>name of the listener as known to the adapter</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setServiceNamespaceURI(String) serviceNamespaceURI}</td><td>namespace of the service that is provided by the adapter of this listener</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setApplicationFaultsAsSoapFaults(boolean) applicationFaultsAsSoapFaults}</td><td>Controls the behavior when an application-fault occurrs: 
 *   <table>
 *     <tr><td><code>true</code></td><td>errors are returned as a SOAP-fault</td></tr>
 *     <tr><td><code>false</code></td><td>errors are returned in error message generated by the IBIS error message formatter</td></tr>
 *   </table>
 * </td><td>true</td></tr>
 * </table>
 * @author  Gerrit van Brakel 
 * @version Id
 */
public class WebServiceListener extends PushingListenerAdapter implements Serializable, HasPhysicalDestination {

	private String serviceNamespaceURI;

	/**
	 * initialize listener and register <code>this</code> to the JNDI
	 */
	public void configure() throws ConfigurationException {
		super.configure();
		try {
			if (StringUtils.isNotEmpty(getServiceNamespaceURI())) {
				log.debug("registering listener ["+getName()+"] with ServiceDispatcher by serviceNamespaceURI ["+getServiceNamespaceURI()+"]");
				ServiceDispatcher.getInstance().registerServiceClient(getServiceNamespaceURI(), this);
			} else {
				log.debug("registering listener ["+getName()+"] with ServiceDispatcher");
				ServiceDispatcher.getInstance().registerServiceClient(getName(), this);
			}
		} catch (Exception e){
			throw new ConfigurationException(e);
		}
	}

	public String getPhysicalDestinationName() {
		if (StringUtils.isNotEmpty(getServiceNamespaceURI())) {
			return "serviceNamespaceURI: "+getServiceNamespaceURI();
		} else {
			return "name: "+getName();
		}
	}


	public String getServiceNamespaceURI() {
		return serviceNamespaceURI;
	}
	public void setServiceNamespaceURI(String string) {
		serviceNamespaceURI = string;
	}

}
