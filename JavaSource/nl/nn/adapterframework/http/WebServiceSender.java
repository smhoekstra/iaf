/*
 * $Log: WebServiceSender.java,v $
 * Revision 1.13  2005-07-05 12:57:04  europe\L190409
 * added serviceNamespaceURI-attribute
 *
 * Revision 1.12  2005/04/26 09:25:12  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * renamed soapConverter to soapWrapper
 *
 * Revision 1.11  2005/02/24 12:15:15  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * moved SOAP conversion coding to SOAP-wrapper
 *
 * Revision 1.10  2004/10/14 15:34:26  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * included ParameterValueList in getMethod(), 
 * in order to override HttpSenders' getMethod()
 *
 * Revision 1.9  2004/10/12 15:10:49  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * added attribute throwApplicationFaults
 *
 * Revision 1.8  2004/09/09 14:48:47  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * removed unused imports
 *
 * Revision 1.7  2004/09/08 14:17:28  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * better handling of SOAP faults
 *
 * Revision 1.6  2004/09/02 13:25:39  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * improved fault-handling
 * added handling of encodingStyleUri
 *
 * Revision 1.5  2004/09/01 12:24:16  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * improved fault handling
 *
 * Revision 1.4  2004/08/31 15:52:22  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * new version based on HttpSender
 *
 * Revision 1.3  2004/08/23 13:08:14  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * updated JavaDoc
 *
 * Revision 1.2  2004/08/17 15:22:15  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * first version using Axis
 *
 */
package nl.nn.adapterframework.http;

import nl.nn.adapterframework.configuration.ConfigurationException;
import nl.nn.adapterframework.core.SenderException;
import nl.nn.adapterframework.core.TimeOutException;
import nl.nn.adapterframework.parameters.ParameterValueList;


import org.apache.commons.httpclient.HttpMethod;
import org.apache.commons.lang.builder.ToStringBuilder;


/**
 * Sender that sends a message via a WebService.
 * 
 * <p><b>Configuration:</b>
 * <table border="1">
 * <tr><th>attributes</th><th>description</th><th>default</th></tr>
 * <tr><td>classname</td><td>nl.nn.adapterframework.http.HttpSender</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setName(String) name}</td><td>name of the sender</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setUrl(String) url}</td><td>URL or base of URL to be used </td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setSoapActionURI(String) soapActionURI}</td><td>the SOAPActionUri to be set in the requestheader</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setServiceNamespaceURI(String) serviceNamespaceURI}</td><td>the namespace of the message sent. Identifies the service to be called. May be overriden by an actual namespace setting in the message to be sent</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setTimeout(int) Timeout}</td><td>timeout ih ms of obtaining a connection/result. 0 means no timeout</td><td>60000</td></tr>
 * <tr><td>{@link #setMaxConnections(int) maxConnections}</td><td>the maximum number of concurrent connections</td><td>2</td></tr>
 * <tr><td>{@link #setUserName(String) userName}</td><td>username used in authentication to host</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setPassword(String) password}</td><td>&nbsp;</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setProxyHost(String) proxyHost}</td><td>&nbsp;</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setProxyPort(int) proxyPort}</td><td>&nbsp;</td><td>80</td></tr>
 * <tr><td>{@link #setProxyUserName(String) proxyUserName}</td><td>&nbsp;</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setProxyPassword(String) proxyPassword}</td><td>&nbsp;</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setProxyRealm(String) proxyRealm}</td><td>&nbsp;</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setKeystoreType(String) keystoreType}</td><td>&nbsp;</td><td>pkcs12</td></tr>
 * <tr><td>{@link #setCertificate(String) certificate}</td><td>resource URL to certificate to be used for authentication</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setCertificatePassword(String) certificatePassword}</td><td>&nbsp;</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setTruststore(String) truststore}</td><td>resource URL to truststore to be used for authentication</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setTruststorePassword(String) truststorePassword}</td><td>&nbsp;</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setAddSecurityProviders(boolean) addSecurityProviders}</td><td>if true, basic SUN security providers are added to the list of providers</td><td>false</td></tr>
 * <tr><td>{@link #setThrowApplicationFaults(boolean) throwApplicationFaults}</td><td>controls whether soap faults generated by the application generate an exception, or are treated as 'normal' messages</td><td>true</td></tr>
 * </table>
 * </p>
 * @author Gerrit van Brakel
 * @since 4.2c
 * 
 */

public class WebServiceSender extends HttpSender {
	public static final String version = "$RCSfile: WebServiceSender.java,v $ $Revision: 1.13 $ $Date: 2005-07-05 12:57:04 $";
	

	private String soapActionURI = "";
	private String encodingStyleURI=null;
	private String serviceNamespaceURI=null;
//	private String methodName = "";
	private boolean throwApplicationFaults=true;
	private SoapWrapper soapWrapper;
	
//	private MessageFactory soapMessageFactory;
	
	public String getLogPrefix() {
		return "WebServiceSender ["+getName()+"] to ["+getPhysicalDestinationName()+"] ";
	}
 
 	public WebServiceSender() {
 		super();
 		setMethodType("POST");
 	}
 

	public void configure() throws ConfigurationException {
		super.configure();
		soapWrapper=SoapWrapper.getInstance();
/*		
		try {
			soapMessageFactory = MessageFactory.newInstance();
		} catch (SOAPException e) {
			throw new ConfigurationException("cannot create SoapMessageFactory",e);
		}
*/		
	}

	protected HttpMethod getMethod(String message, ParameterValueList parameters) throws SenderException {
		
		String soapmsg= soapWrapper.putInEnvelope(message, getEncodingStyleURI(),getServiceNamespaceURI());
		HttpMethod method = super.getMethod(soapmsg,parameters);
		log.debug("setting SOAPAction header ["+getSoapActionURI()+"]");
		method.addRequestHeader("Content-Type","text/xml");
		method.addRequestHeader("SOAPAction",getSoapActionURI());
		return method;
	}


	public String extractResult(HttpMethod httpmethod) throws SenderException {
		String httpResult;
		try {
			httpResult = super.extractResult(httpmethod);
		} catch (SenderException e) {
			soapWrapper.checkForSoapFault(httpmethod.getResponseBodyAsString(), e);
			throw e;
		}
		
		if (isThrowApplicationFaults()) {
			soapWrapper.checkForSoapFault(httpmethod.getResponseBodyAsString(), null);
		}
		try {
			String result = soapWrapper.getBody(httpResult);
			return (result);
		} catch (Exception e) {
			throw new SenderException("cannot retrieve result message",e);
		}
	}

	public String sendMessage(String correlationID, String message) throws SenderException, TimeOutException {
			return super.sendMessage(correlationID,message);
	}

/*
	public String extractResult_1(HttpMethod httpmethod) throws SenderException {
		SOAPMessage message;
		SOAPBody body;
		try {
			message = soapMessageFactory.createMessage(null,httpmethod.getResponseBodyAsStream());
			body = message.getSOAPBody();
		} catch (Exception e) {
			throw new SenderException("cannot create result message object",e);
		}
		if (body.hasFault()) {
			SOAPFault fault = body.getFault();
			throw new SenderException("SOAP Fault, code["+fault.getFaultCode()+"] actor["+fault.getFaultActor()+"]  string ["+fault.getFaultString()+"] string ["+ToStringBuilder.reflectionToString(fault.getDetail())+"]");
		}
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		
		try {
			message.writeTo(out);
		} catch (Exception e) {
			throw new SenderException("cannot write result message object to stream",e);
		}
		return (out.toString());
	}
*/	





	public String toString() {
		return ToStringBuilder.reflectionToString(this);
	}


	public String getSoapActionURI() {
		return soapActionURI;
	}
	public void setSoapActionURI(String soapActionURI) {
		this.soapActionURI = soapActionURI;
	}


	public String getEncodingStyleURI() {
		return encodingStyleURI;
	}

	public void setEncodingStyleURI(String string) {
		encodingStyleURI = string;
	}


	public boolean isThrowApplicationFaults() {
		return throwApplicationFaults;
	}
	
	public void setThrowApplicationFaults(boolean b) {
		throwApplicationFaults = b;
	}

	public String getServiceNamespaceURI() {
		return serviceNamespaceURI;
	}

	public void setServiceNamespaceURI(String string) {
		serviceNamespaceURI = string;
	}

}