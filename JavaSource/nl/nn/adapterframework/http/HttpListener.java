/*
   Copyright 2013 Nationale-Nederlanden

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
/*
 * $Log: HttpListener.java,v $
 * Revision 1.8  2011-11-30 13:52:00  europe\m168309
 * adjusted/reversed "Upgraded from WebSphere v5.1 to WebSphere v6.1"
 *
 * Revision 1.1  2011/10/19 14:49:43  Peter Leeuwenburgh <peter.leeuwenburgh@ibissource.org>
 * Upgraded from WebSphere v5.1 to WebSphere v6.1
 *
 * Revision 1.6  2011/05/24 12:40:08  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * added physical destination name
 *
 * Revision 1.5  2011/05/19 15:09:57  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * now extends PushingListenerAdapter
 *
 * Revision 1.4  2007/10/08 12:18:20  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * changed HashMap to Map where possible
 *
 * Revision 1.3  2007/10/03 08:37:49  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * changed HashMap to Map
 *
 * Revision 1.2  2007/02/12 13:55:57  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * Logger from LogUtil
 *
 * Revision 1.1  2006/02/09 07:54:05  Gerrit van Brakel <gerrit.van.brakel@ibissource.org>
 * initial versions
 *
 */
package nl.nn.adapterframework.http;

import nl.nn.adapterframework.configuration.ConfigurationException;
import nl.nn.adapterframework.core.HasPhysicalDestination;
import nl.nn.adapterframework.core.IPushingListener;
import nl.nn.adapterframework.receivers.ServiceDispatcher;

import org.apache.commons.lang.StringUtils;

/**
 * Implementation of a {@link IPushingListener} that enables a {@link nl.nn.adapterframework.receivers.GenericReceiver}
 * to receive messages from HTTP requests.
 * <p><b>Configuration:</b>
 * <table border="1">
 * <tr><th>attributes</th><th>description</th><th>default</th></tr>
 * <tr><td>className</td><td>nl.nn.adapterframework.http.WebServiceListener</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setName(String) name}</td><td>name of the listener as known to the adapter</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setServiceName(String) serviceName}</td><td>name of the service that is provided by the adapter of this listener</td><td>&nbsp;</td></tr>
 * <tr><td>{@link #setApplicationFaultsAsExceptions(boolean) applicationFaultsAsExceptions}</td><td>Controls the behavior when an application-fault occurrs: 
 *   <table>
 *     <tr><td><code>true</code></td><td>errors are returned as a HTTP internal server error (500)</td></tr>
 *     <tr><td><code>false</code></td><td>errors are returned in error message generated by the IBIS error message formatter</td></tr>
 *   </table>
 * </td><td>true</td></tr>
 * </table>
 * @author  Gerrit van Brakel 
 * @since   4.4.x (still experimental)
 * @version $Id$
 */
public class HttpListener extends PushingListenerAdapter implements HasPhysicalDestination {

	private String serviceName;

	/**
	 * initialize listener and register <code>this</code> to the JNDI
	 */
	public void configure() throws ConfigurationException {
		super.configure();
		try {
			if (StringUtils.isEmpty(getServiceName())) {
				log.debug("registering listener ["+getName()+"] with ServiceDispatcher");
				ServiceDispatcher.getInstance().registerServiceClient(getName(), this);
			} else {
				log.debug("registering listener ["+getName()+"] with ServiceDispatcher by serviceName ["+getServiceName()+"]");
				ServiceDispatcher.getInstance().registerServiceClient(getServiceName(), this);
			}
		} catch (Exception e){
			throw new ConfigurationException(e);
		}
	}

	public String getPhysicalDestinationName() {
		return "serviceName: "+getServiceName();
	}


	public String getServiceName() {
		return serviceName;
	}
	public void setServiceName(String string) {
		serviceName = string;
	}

}
